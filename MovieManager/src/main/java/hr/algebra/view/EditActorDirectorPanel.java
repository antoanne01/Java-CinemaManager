/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.Director;
import hr.algebra.utilities.MessageUtils;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/**
 *
 * @author antoanne
 */
public class EditActorDirectorPanel extends javax.swing.JPanel {

    private Repository repository;

    private final DefaultListModel<Actor> actorModel = new DefaultListModel<>();
    private final DefaultListModel<Director> directorModel = new DefaultListModel<>();

    private List<Actor> actors;
    private List<Director> directors;
    
    /**
     * Creates new form EditActorDirectorPanel
     */
    public EditActorDirectorPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsDirectors = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        tfActorName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tfDirectorName = new javax.swing.JTextField();
        btnDeleteActor = new javax.swing.JButton();
        btnAddActor = new javax.swing.JButton();
        btnUpdateActor = new javax.swing.JButton();
        btnUpdateDirector = new javax.swing.JButton();
        btnDeleteDirector = new javax.swing.JButton();
        btnAddDirector = new javax.swing.JButton();
        lblActorNameError = new javax.swing.JLabel();
        lblDirectorNameError = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jScrollPane1.setViewportView(lsActors);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setText("Actors");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel2.setText("Directors");

        jScrollPane2.setViewportView(lsDirectors);

        jLabel3.setText("Mark actor and write bellow for edit");

        jLabel4.setText("Mark director and write bellow for edit");

        btnDeleteActor.setText("Delete");
        btnDeleteActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActorActionPerformed(evt);
            }
        });

        btnAddActor.setText("Add New Actor");
        btnAddActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActorActionPerformed(evt);
            }
        });

        btnUpdateActor.setText("Update");
        btnUpdateActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActorActionPerformed(evt);
            }
        });

        btnUpdateDirector.setText("Update");
        btnUpdateDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDirectorActionPerformed(evt);
            }
        });

        btnDeleteDirector.setText("Delete");
        btnDeleteDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDirectorActionPerformed(evt);
            }
        });

        btnAddDirector.setText("Add New Director");
        btnAddDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDirectorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnUpdateActor)
                            .addGap(44, 44, 44)
                            .addComponent(btnDeleteActor))
                        .addComponent(tfActorName, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblActorNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUpdateDirector)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteDirector))
                    .addComponent(tfDirectorName, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblDirectorNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(129, 129, 129))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(150, 150, 150)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnAddActor, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(150, 150, 150)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4)
                        .addComponent(btnAddDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddDirector)
                    .addComponent(btnAddActor))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfDirectorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfActorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnUpdateDirector)
                                .addComponent(btnDeleteDirector))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnUpdateActor)
                                .addComponent(btnDeleteActor))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblActorNameError)
                            .addComponent(lblDirectorNameError))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnAddActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActorActionPerformed
        String actName = tfActorName.getText().trim();
        Actor actor = new Actor(actName);
        new CrudDialog((JFrame) SwingUtilities.windowForComponent(this), true, actor, null).setVisible(true);
        try {
            initActors();
        } catch (Exception ex) {
            Logger.getLogger(EditActorDirectorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshActors();
    }//GEN-LAST:event_btnAddActorActionPerformed

    private void btnDeleteActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActorActionPerformed
        Actor chosenActor = lsActors.getSelectedValue();
        try {
            int isExists = repository.checkActorRelatesToAMovie(chosenActor.getIdActor());
            if (isExists != 0) {
                MessageUtils.showInformationMessage("Delete Actor",
                        "Cannot delete, it is related to at least one movie");
            } else {
                repository.deleteActor(chosenActor.getIdActor());
                MessageUtils.showInformationMessage("Delete Actor", "Sucessfully deleted");
                tfActorName.setText("");
            }
        } catch (Exception ex) {
            Logger.getLogger(EditActorDirectorPanel.class.getName())
                    .log(Level.SEVERE, null, ex);
        }
        refreshActors();
    }//GEN-LAST:event_btnDeleteActorActionPerformed

    private void btnUpdateActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActorActionPerformed
        if (!tfActorName.getText().trim().isEmpty()) {
            lblActorNameError.setText("");
            String actorName = tfActorName.getText().trim();
            Actor choosenActor = lsActors.getSelectedValue();
            try {
                repository.updateActor(choosenActor.getIdActor(), actorName);
                tfActorName.setText("");
                MessageUtils.showInformationMessage("Update Actor", "Successfully updated");
            } catch (Exception ex) {
                Logger.getLogger(EditActorDirectorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            refreshActors();
        }
    }//GEN-LAST:event_btnUpdateActorActionPerformed

    private void btnAddDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDirectorActionPerformed
        String dirName = tfDirectorName.getText().trim();
        Director director = new Director(dirName);
        new CrudDialog((JFrame) SwingUtilities.windowForComponent(this), true, null, director).setVisible(true);
        try {
            initDirectors();
        } catch (Exception ex) {
            Logger.getLogger(EditActorDirectorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        refteshDirectors();
    }//GEN-LAST:event_btnAddDirectorActionPerformed

    private void btnDeleteDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDirectorActionPerformed
        Director chosenDirector = lsDirectors.getSelectedValue();
        try {
            int isExists = repository.checkDirectorRelatesToAMovie(chosenDirector.getIdDirector());
            if (isExists != 0) {
                MessageUtils.showInformationMessage("Delete Director",
                        "Cannot delete, it is related to at least one movie");
            } else {
                repository.deleteDirector(chosenDirector.getIdDirector());
                MessageUtils.showInformationMessage("Delete Director", "Sucessfully deleted");
                tfDirectorName.setText("");
            }
        } catch (Exception ex) {
            Logger.getLogger(EditActorDirectorPanel.class.getName())
                    .log(Level.SEVERE, null, ex);
        }
        refteshDirectors();

    }//GEN-LAST:event_btnDeleteDirectorActionPerformed

    private void btnUpdateDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDirectorActionPerformed
        if (!tfDirectorName.getText().trim().isEmpty()) {
            lblDirectorNameError.setText("");
            String directorName = tfDirectorName.getText().trim();
            Director choosenDirector = lsDirectors.getSelectedValue();
            try {
                repository.updateDirector(choosenDirector.getIdDirector(), directorName);
                tfDirectorName.setText("");
                MessageUtils.showInformationMessage("Update Director", "Successfully updated");
            } catch (Exception ex) {
                Logger.getLogger(EditActorDirectorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            refteshDirectors();
        }
    }//GEN-LAST:event_btnUpdateDirectorActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddActor;
    private javax.swing.JButton btnAddDirector;
    private javax.swing.JButton btnDeleteActor;
    private javax.swing.JButton btnDeleteDirector;
    private javax.swing.JButton btnUpdateActor;
    private javax.swing.JButton btnUpdateDirector;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblActorNameError;
    private javax.swing.JLabel lblDirectorNameError;
    private javax.swing.JList<Actor> lsActors;
    private javax.swing.JList<Director> lsDirectors;
    private javax.swing.JTextField tfActorName;
    private javax.swing.JTextField tfDirectorName;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initRepository();
            initActors();
            initDirectors();
        } catch (Exception ex) {
            Logger.getLogger(EditActorDirectorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initRepository() {
        repository = RepositoryFactory.getRepository();
    }

    private void initActors() throws Exception {
        actorModel.clear();
        actors = repository.selectAllActors();
        for (Actor actor : actors) {
            actorModel.addElement(actor);
        }
        lsActors.setModel(actorModel);
    }

    private void initDirectors() throws Exception {
        directorModel.clear();
        directors = repository.selectAllDirectors();
        directors.forEach(directorModel::addElement);
        lsDirectors.setModel(directorModel);
    }

    // runnable -> executes the code defined in the lambda expression passed to refreshModel
    private void refreshModel(DefaultListModel<?> model, Runnable repositoryMethod) {
        try {
            model.clear();
            repositoryMethod.run();
        } catch (Exception ex) {
            Logger.getLogger(EditActorDirectorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void refreshActors() {
        refreshModel(actorModel, () -> {
            try {
                actors = repository.selectAllActors();
                actors.forEach(actorModel::addElement);
                lsActors.setModel(actorModel);
            } catch (Exception ex) {
                Logger.getLogger(EditActorDirectorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    private void refteshDirectors() {
        refreshModel(directorModel, () -> {
            try {
                directors = repository.selectAllDirectors();
                directors.forEach(directorModel::addElement);
                lsDirectors.setModel(directorModel);
            } catch (Exception ex) {
                Logger.getLogger(EditActorDirectorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }
}
