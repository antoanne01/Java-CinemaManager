/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.Director;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieArchive;
import hr.algebra.utilities.FileUtils;
import hr.algebra.utilities.IconUtils;
import hr.algebra.utilities.JAXBUtils;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.MovieTableModel;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.JTextComponent;

/**
 *
 * @author antoanne
 */
public class EditMoviePanel extends javax.swing.JPanel {

    private Movie selectedMovie;
    private Repository repository;

    private static final String MOVIESTOXML = "movies.xml";

    private final DefaultListModel<Actor> actorModel = new DefaultListModel<>();
    private final DefaultListModel<Director> directorModel = new DefaultListModel<>();

    private List<Actor> actorsRelateToMovie;
    private List<Director> directorsRelatedToMovie;

    private final Map<JTextComponent, JLabel> validationMap = new LinkedHashMap<>();
    private static final String POSTERPATH_STRING = "/images/initialMovieImage.png";

    private MovieTableModel tableModel;

    /**
     * Creates new form EditMoviePanel
     */
    public EditMoviePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        lbTitleError = new javax.swing.JLabel();
        lbLinkError = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfLink = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tfInCinemaFrom = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tfPublishFrom = new javax.swing.JTextField();
        lbPoster = new javax.swing.JLabel();
        tfDuration = new javax.swing.JTextField();
        btnEdit = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnXML = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        lbDescriptionError = new javax.swing.JLabel();
        lbDurationError = new javax.swing.JLabel();
        lbInCinemaFromError = new javax.swing.JLabel();
        lbPublishFromError = new javax.swing.JLabel();
        tfPoster = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        lbExpectedError = new javax.swing.JLabel();
        btnChangeImage = new javax.swing.JButton();
        tfExpected = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        lbPosterPathError = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tfOriginalTitle = new javax.swing.JTextField();
        lbOriginalTitleError = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(900, 650));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Title");

        lbTitleError.setForeground(new java.awt.Color(255, 0, 0));
        lbTitleError.setText("X");

        lbLinkError.setForeground(new java.awt.Color(255, 0, 0));
        lbLinkError.setText("X");

        jLabel4.setText("Link");

        jLabel5.setText("Description");

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        jScrollPane1.setViewportView(taDescription);

        jLabel6.setText("Duration (min)");

        jLabel7.setText("In Cinema From");

        jLabel8.setText("Published date");

        lbPoster.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/initialMoviePoster.png"))); // NOI18N

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnNew.setText("Add New Movie");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnXML.setText("Save to XML");
        btnXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXMLActionPerformed(evt);
            }
        });

        jScrollPane5.setPreferredSize(new java.awt.Dimension(500, 402));

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbMoviesMouseReleased(evt);
            }
        });
        jScrollPane5.setViewportView(tbMovies);

        lbDescriptionError.setForeground(new java.awt.Color(255, 0, 0));
        lbDescriptionError.setText("X");

        lbDurationError.setForeground(new java.awt.Color(255, 0, 0));
        lbDurationError.setText("X");

        lbInCinemaFromError.setForeground(new java.awt.Color(255, 0, 0));
        lbInCinemaFromError.setText("X");

        lbPublishFromError.setForeground(new java.awt.Color(255, 0, 0));
        lbPublishFromError.setText("X");

        tfPoster.setEnabled(false);

        jLabel11.setText("Expected in Cinema");

        lbExpectedError.setForeground(new java.awt.Color(255, 0, 0));
        lbExpectedError.setText("X");

        btnChangeImage.setText("Change Image");
        btnChangeImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeImageActionPerformed(evt);
            }
        });

        jLabel12.setText("Poster path");

        lbPosterPathError.setForeground(new java.awt.Color(255, 0, 0));
        lbPosterPathError.setText("X");

        jLabel9.setText("Original Title");

        lbOriginalTitleError.setForeground(new java.awt.Color(255, 0, 0));
        lbOriginalTitleError.setText("X");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(tfDuration)
                                .addComponent(jLabel7)
                                .addComponent(jScrollPane1)
                                .addComponent(jLabel5)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tfInCinemaFrom)
                                .addComponent(tfTitle)
                                .addComponent(tfLink)
                                .addComponent(jLabel8)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(tfExpected, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tfPublishFrom, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lbPublishFromError)
                                        .addComponent(lbExpectedError))))
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lbInCinemaFromError)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(lbOriginalTitleError))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnChangeImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnXML, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE))
                                        .addComponent(jLabel9))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbTitleError)
                                    .addComponent(lbLinkError)
                                    .addComponent(lbDescriptionError))
                                .addGap(18, 18, 18)
                                .addComponent(lbPoster, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbDurationError)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 847, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(538, 538, 538)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfPoster, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbPosterPathError)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbPoster, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbTitleError))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lbLinkError)
                                    .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(54, 54, 54)
                                        .addComponent(lbDescriptionError))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbDurationError)
                            .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfInCinemaFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbInCinemaFromError)))
                            .addComponent(btnXML, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(btnChangeImage))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfPublishFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbPublishFromError))))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbOriginalTitleError, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)))
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfExpected, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbExpectedError))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel12)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfPoster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPosterPathError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        try {
            init();
        } catch (Exception ex) {
            Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formComponentShown

    private void tbMoviesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseReleased
        showMovieData();
    }//GEN-LAST:event_tbMoviesMouseReleased

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            if (selectedMovie != null) {
                repository.deleteSelectedMovie(selectedMovie.getIdMovie());
                clearForm();
                initMovieTable();
            }
        } catch (Exception ex) {
            Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        try {
            Movie movie = new Movie();
            movie.setTitle(tfTitle.getText().trim());
            movie.setPubDate(LocalDateTime.parse(tfPublishFrom.getText().trim(), Movie.DATE_FORMATTER));
            movie.setDescription(taDescription.getText().trim());
            movie.setDuration(tfDuration.getText().trim());
            movie.setOriginalTitle(tfOriginalTitle.getText().trim());
            movie.setLink(tfLink.getText().trim());
            movie.setExpected(LocalDate.parse(tfExpected.getText().trim(), Movie.DATE_FORMAT));
            movie.setPosterPath(tfPoster.getText().trim());

            Optional<Movie> existingMovie = repository.selectMovie(tfTitle.getText().trim());
            if (selectedMovie != null && existingMovie.isPresent() && existingMovie.get().getIdMovie() != selectedMovie.getIdMovie()) {
                MessageUtils.showErrorMessage("Error", "Movie already exists");
            } else {
                if (selectedMovie != null) {
                    repository.updateMovie(selectedMovie.getIdMovie(), movie);
                    clearForm();
                    initMovieTable();
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnChangeImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeImageActionPerformed
        try {
            Optional<File> file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
            if (!file.isPresent()) {
                return;
            }
            tfPoster.setText(file.get().getAbsolutePath());
            setIcon(lbPoster, file.get());
        } catch (Exception ex) {
            Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnChangeImageActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        try {
            String movieTitle = tfTitle.getText().trim();
            Optional<Movie> existingMovie = repository.selectMovie(movieTitle);
            if (existingMovie.isPresent()) {
                MessageUtils.showErrorMessage("Error", "Movie already exists");
                initMovieTable();
                clearForm();
                return;
            }

            Movie movie = CreateMovie();
            String posterPath = selectPosterPath();

            if (posterPath == null) {
                MessageUtils.showInformationMessage("Poster", "Adding poster cancelled");
                initMovieTable();
                clearForm();
                return;
            }

            movie.setPosterPath(posterPath);
            repository.createMovie(movie);
            MessageUtils.showInformationMessage("Created", "Movie successfully inserted");

            initMovieTable();
            clearForm();
            lbPoster.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/initialMoviePoster.png")));
        } catch (Exception ex) {
            Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Error while adding videos");
        }
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXMLActionPerformed
        try {
            JAXBUtils.save(new MovieArchive(repository.selectMovies()), MOVIESTOXML);
            MessageUtils.showInformationMessage("Info", "Saved.");
        } catch (Exception ex) {
            Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to save movies");
        }
    }//GEN-LAST:event_btnXMLActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChangeImage;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnXML;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lbDescriptionError;
    private javax.swing.JLabel lbDurationError;
    private javax.swing.JLabel lbExpectedError;
    private javax.swing.JLabel lbInCinemaFromError;
    private javax.swing.JLabel lbLinkError;
    private javax.swing.JLabel lbOriginalTitleError;
    private javax.swing.JLabel lbPoster;
    private javax.swing.JLabel lbPosterPathError;
    private javax.swing.JLabel lbPublishFromError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfExpected;
    private javax.swing.JTextField tfInCinemaFrom;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfOriginalTitle;
    private javax.swing.JTextField tfPoster;
    private javax.swing.JTextField tfPublishFrom;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initValidation();
            hideErrors();
            initRepository();
            initMovieTable();
        } catch (Exception ex) {
            Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initRepository() {
        repository = RepositoryFactory.getRepository();
    }

    private void initMovieTable() throws Exception {
        try {
            tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            tbMovies.setAutoCreateRowSorter(true);
            tbMovies.setRowHeight(25);
            tableModel = new MovieTableModel(repository.selectMovies());
            tbMovies.setModel(tableModel);
        } catch (Exception ex) {
            Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showMovieData() {
        clearForm();

        int selectedRow = tbMovies.getSelectedRow();
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) tableModel.getValueAt(rowIndex, 0);

        try {

            Optional<Movie> optionalMovie = repository.selectMovie(selectedMovieId);

            actorsRelateToMovie = repository.selectActors(selectedMovieId);
            directorsRelatedToMovie = repository.selectDirectors(selectedMovieId);

            selectedMovie = optionalMovie.get();
            populateData(selectedMovie);

            directorsRelatedToMovie.forEach(directorModel::addElement);
            actorsRelateToMovie.forEach(actorModel::addElement);
        } catch (Exception ex) {
            Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Movie Error", "Error while showing movie");
        }
    }

    private void clearForm() {
        validationMap.keySet().forEach(v -> v.setText(""));
        validationMap.values().forEach(v -> v.setVisible(true));
        hideErrors();
        actorModel.clear();
        directorModel.clear();
        selectedMovie = null;
    }

    private void setIcon(JLabel posterPlace, File file) {
        try {
            posterPlace.setIcon(IconUtils.createIcon(file, posterPlace.getWidth(), posterPlace.getHeight()));
        } catch (Exception ex) {
            Logger.getLogger(Movie.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Error while setting poster");
        }
    }

    private void populateData(Movie selectedMovie) {
        try {
            if (selectedMovie.getPosterPath() != null && Files.exists(Path.of(selectedMovie.getPosterPath()))) {
                setIcon(lbPoster, new File(selectedMovie.getPosterPath()));
            } else {
                lbPoster.setIcon(new ImageIcon(getClass().getResource(POSTERPATH_STRING)));
            }
            tfTitle.setText(selectedMovie.getTitle());
            tfLink.setText(selectedMovie.getLink());
            taDescription.setText(selectedMovie.getDescription());
            tfOriginalTitle.setText(selectedMovie.getOriginalTitle());
            tfDuration.setText(selectedMovie.getDuration());
            tfInCinemaFrom.setText(selectedMovie.getExpected().format(Movie.DATE_FORMAT));
            tfPublishFrom.setText(selectedMovie.getPubDate().format(Movie.DATE_FORMATTER));
            tfExpected.setText(selectedMovie.getExpected().format(Movie.DATE_FORMAT));
            tfPoster.setText(selectedMovie.getPosterPath());

        } catch (Exception ex) {
            Logger.getLogger(Movie.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Error while displaying movies");
        }
    }

    private void initValidation() {
        validationMap.put(tfTitle, lbTitleError);
        validationMap.put(tfLink, lbLinkError);
        validationMap.put(taDescription, lbDescriptionError);
        validationMap.put(tfDuration, lbDurationError);
        validationMap.put(tfOriginalTitle, lbOriginalTitleError);
        validationMap.put(tfInCinemaFrom, lbInCinemaFromError);
        validationMap.put(tfInCinemaFrom, lbInCinemaFromError);
        validationMap.put(tfPublishFrom, lbPublishFromError);
        validationMap.put(tfExpected, lbExpectedError);
        validationMap.put(tfPoster, lbPosterPathError);
    }

    private void hideErrors() {
        validationMap.values().forEach(v -> v.setVisible(false));
    }

    private Movie CreateMovie() {

        Movie movie = new Movie();
        movie.setTitle(tfTitle.getText().trim());
        movie.setPubDate(LocalDateTime.parse(tfPublishFrom.getText().trim(), Movie.DATE_FORMATTER));
        movie.setDescription(taDescription.getText().trim());
        movie.setOriginalTitle(tfOriginalTitle.getText().trim());
        movie.setDuration(tfDuration.getText().trim());
        movie.setLink(tfLink.getText().trim());
        movie.setExpected(LocalDate.parse(tfExpected.getText().trim(), Movie.DATE_FORMAT));
        movie.setPosterPath(tfPoster.getText().trim());

        return movie;
    }

    private String selectPosterPath() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Images", "jpg", "jpeg", "png");
        fileChooser.setFileFilter(filter);

        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            tfPoster.setText(selectedFile.getAbsolutePath());
            setIcon(lbPoster, selectedFile);
            return selectedFile.getAbsolutePath();
        }

        return null;
    }

}
