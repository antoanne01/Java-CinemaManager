/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.ActorTransferableToMovies;
import hr.algebra.model.Movie;
import hr.algebra.utilities.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;

/**
 *
 * @author antoanne
 */
public class DragAndDropPanel extends javax.swing.JPanel {

    private Repository repository;
    private final DefaultListModel<Actor> actorsModel = new DefaultListModel<>();
    private final DefaultListModel<Movie> moviesModel = new DefaultListModel<>();

    private List<Actor> actors;
    private List<Movie> movies;
    private Movie selectedMovie;

    /**
     * Creates new form DragAndDropPanel
     */
    public DragAndDropPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsMovies = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lsActors.setDragEnabled(true);
        jScrollPane1.setViewportView(lsActors);

        lsMovies.setDropMode(javax.swing.DropMode.ON);
        jScrollPane2.setViewportView(lsMovies);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel1.setText("Movies");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel2.setText("Actors");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(199, 199, 199)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE))
                .addContainerGap(98, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Actor> lsActors;
    private javax.swing.JList<Movie> lsMovies;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initRepository();
            initModels();
            initDnD();
        } catch (Exception ex) {
            Logger.getLogger(DragAndDropPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initRepository() {
        repository = RepositoryFactory.getRepository();
    }

    private void initModels() {
        try {

            lsActors.setModel(actorsModel);
            lsMovies.setModel(moviesModel);

            actorsModel.clear();
            moviesModel.clear();

            actors = repository.selectAllActors();
            movies = repository.selectMovies();

            for (Actor actor : actors) {
                actorsModel.addElement(actor);
            }

            for (Movie movie : movies) {
                moviesModel.addElement(movie);
            }

        } catch (Exception ex) {
            Logger.getLogger(DragAndDropPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initDnD() {
        lsActors.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        lsActors.setDragEnabled(true);
        lsActors.setTransferHandler(new DragAndDropPanel.ExportHandler());
        
        lsMovies.setDropMode(DropMode.ON_OR_INSERT);
        lsMovies.setTransferHandler(new DragAndDropPanel.ImportHandler());
    }
    
    private class ImportHandler extends TransferHandler {
        
        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(ActorTransferableToMovies.ACTOR_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            try {
                Actor actor = getPersonFromTransferable(support.getTransferable());
                selectedMovie = getSelectedMovie(support);

                if (selectedMovie != null) {
                    return handleMovieActorLink(selectedMovie, actor);
                }
                
            } catch (IOException | UnsupportedFlavorException ex) {
                Logger.getLogger(DragAndDropPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(DragAndDropPanel.class.getName()).log(Level.SEVERE, "Failed to save actor to the movie.", ex);
            }

            return false;
        }
        
        private Actor getPersonFromTransferable(Transferable transferable) throws UnsupportedFlavorException, IOException {
            return (Actor) transferable.getTransferData(ActorTransferableToMovies.ACTOR_FLAVOR);
        }
        
        private Movie getSelectedMovie(TransferHandler.TransferSupport support) {
            JList.DropLocation dl = (JList.DropLocation) support.getDropLocation();
            int index = dl.getIndex();
            return moviesModel.getElementAt(index);
        }

        private boolean handleMovieActorLink(Movie movie, Actor actor) throws Exception {
            Optional<Movie> optionalMovie = repository.selectMovie(movie.getIdMovie());
            
            if (optionalMovie.isPresent()) {
                movie = optionalMovie.get();
                List<Actor> movieActor = movie.getActors();

                if (isActorAlreadyLinked(movieActor, actor)) {
                    MessageUtils.showInformationMessage("Warning", "Actor already connected with the movie.");
                    return false;
                }

                if (!confirmLinkage()) {
                    return false;
                }
                linkToMovie(movie, movieActor, actor);
                return true;
            }
            return false;
        }

        private boolean isActorAlreadyLinked(List<Actor> movieActor, Actor director) {
            return movieActor != null && movieActor.contains(director);
        }

        private boolean confirmLinkage() {
            return MessageUtils.showConfirmDialog("Add actor", "Add this actor(s) to the movie?");
        }

        private void linkToMovie(Movie movie, List<Actor> movieActor, Actor actor) throws Exception {
            if (movieActor == null) {
                movieActor = new ArrayList<>();
                movie.setActors(movieActor);
            }

            movieActor.add(actor);
            repository.addMovieActor(movie.getIdMovie(), actor.getIdActor());            

            loadMoviesModel();
        }
    } 

    private void loadMoviesModel() throws Exception {
        moviesModel.clear();
        movies = repository.selectMovies();
        movies.forEach(moviesModel::addElement);
        lsMovies.setModel(moviesModel);
    }

    private class ExportHandler extends TransferHandler {
        
        @Override
        protected Transferable createTransferable(JComponent c) {
            return new ActorTransferableToMovies(lsActors.getSelectedValue());
        }

        @Override
        public int getSourceActions(JComponent c) {
            return MOVE;
        }
    }
}
